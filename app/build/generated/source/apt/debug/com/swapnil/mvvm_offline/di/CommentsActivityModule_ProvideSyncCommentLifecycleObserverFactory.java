// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.swapnil.mvvm_offline.di;

import com.swapnil.mvvm_offline.domain.DeleteCommentUseCase;
import com.swapnil.mvvm_offline.domain.UpdateCommentUseCase;
import com.swapnil.mvvm_offline.domain.services.SyncCommentLifecycleObserver;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class CommentsActivityModule_ProvideSyncCommentLifecycleObserverFactory
    implements Factory<SyncCommentLifecycleObserver> {
  private final CommentsActivityModule module;

  private final Provider<UpdateCommentUseCase> updateCommentUseCaseProvider;

  private final Provider<DeleteCommentUseCase> deleteCommentUseCaseProvider;

  public CommentsActivityModule_ProvideSyncCommentLifecycleObserverFactory(
      CommentsActivityModule module,
      Provider<UpdateCommentUseCase> updateCommentUseCaseProvider,
      Provider<DeleteCommentUseCase> deleteCommentUseCaseProvider) {
    assert module != null;
    this.module = module;
    assert updateCommentUseCaseProvider != null;
    this.updateCommentUseCaseProvider = updateCommentUseCaseProvider;
    assert deleteCommentUseCaseProvider != null;
    this.deleteCommentUseCaseProvider = deleteCommentUseCaseProvider;
  }

  @Override
  public SyncCommentLifecycleObserver get() {
    return Preconditions.checkNotNull(
        module.provideSyncCommentLifecycleObserver(
            updateCommentUseCaseProvider.get(), deleteCommentUseCaseProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<SyncCommentLifecycleObserver> create(
      CommentsActivityModule module,
      Provider<UpdateCommentUseCase> updateCommentUseCaseProvider,
      Provider<DeleteCommentUseCase> deleteCommentUseCaseProvider) {
    return new CommentsActivityModule_ProvideSyncCommentLifecycleObserverFactory(
        module, updateCommentUseCaseProvider, deleteCommentUseCaseProvider);
  }

  /**
   * Proxies {@link CommentsActivityModule#provideSyncCommentLifecycleObserver(UpdateCommentUseCase,
   * DeleteCommentUseCase)}.
   */
  public static SyncCommentLifecycleObserver proxyProvideSyncCommentLifecycleObserver(
      CommentsActivityModule instance,
      UpdateCommentUseCase updateCommentUseCase,
      DeleteCommentUseCase deleteCommentUseCase) {
    return instance.provideSyncCommentLifecycleObserver(updateCommentUseCase, deleteCommentUseCase);
  }
}
