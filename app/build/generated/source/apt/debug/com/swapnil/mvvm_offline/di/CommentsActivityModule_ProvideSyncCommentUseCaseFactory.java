// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.swapnil.mvvm_offline.di;

import com.swapnil.mvvm_offline.domain.RemoteCommentRepository;
import com.swapnil.mvvm_offline.domain.SyncCommentUseCase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class CommentsActivityModule_ProvideSyncCommentUseCaseFactory
    implements Factory<SyncCommentUseCase> {
  private final CommentsActivityModule module;

  private final Provider<RemoteCommentRepository> remoteCommentRepositoryProvider;

  public CommentsActivityModule_ProvideSyncCommentUseCaseFactory(
      CommentsActivityModule module,
      Provider<RemoteCommentRepository> remoteCommentRepositoryProvider) {
    assert module != null;
    this.module = module;
    assert remoteCommentRepositoryProvider != null;
    this.remoteCommentRepositoryProvider = remoteCommentRepositoryProvider;
  }

  @Override
  public SyncCommentUseCase get() {
    return Preconditions.checkNotNull(
        module.provideSyncCommentUseCase(remoteCommentRepositoryProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<SyncCommentUseCase> create(
      CommentsActivityModule module,
      Provider<RemoteCommentRepository> remoteCommentRepositoryProvider) {
    return new CommentsActivityModule_ProvideSyncCommentUseCaseFactory(
        module, remoteCommentRepositoryProvider);
  }

  /** Proxies {@link CommentsActivityModule#provideSyncCommentUseCase(RemoteCommentRepository)}. */
  public static SyncCommentUseCase proxyProvideSyncCommentUseCase(
      CommentsActivityModule instance, RemoteCommentRepository remoteCommentRepository) {
    return instance.provideSyncCommentUseCase(remoteCommentRepository);
  }
}
