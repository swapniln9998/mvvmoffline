// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.swapnil.mvvm_offline.di;

import android.app.Activity;
import android.content.Context;
import com.swapnil.mvvm_offline.App;
import com.swapnil.mvvm_offline.App_MembersInjector;
import com.swapnil.mvvm_offline.data.CommentDao;
import com.swapnil.mvvm_offline.domain.AddCommentUseCase;
import com.swapnil.mvvm_offline.domain.DeleteCommentUseCase;
import com.swapnil.mvvm_offline.domain.GetCommentsUseCase;
import com.swapnil.mvvm_offline.domain.LocalCommentRepository;
import com.swapnil.mvvm_offline.domain.RemoteCommentRepository;
import com.swapnil.mvvm_offline.domain.SyncCommentUseCase;
import com.swapnil.mvvm_offline.domain.UpdateCommentUseCase;
import com.swapnil.mvvm_offline.domain.services.SyncCommentLifecycleObserver;
import com.swapnil.mvvm_offline.presentation.CommentsViewModelFactory;
import com.swapnil.mvvm_offline.view.CommentsActivity;
import com.swapnil.mvvm_offline.view.CommentsActivity_MembersInjector;
import dagger.MembersInjector;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<BuildersModule_BindCommentsActivity.CommentsActivitySubcomponent.Builder>
      commentsActivitySubcomponentBuilderProvider;

  private Provider<AndroidInjector.Factory<? extends Activity>> bindAndroidInjectorFactoryProvider;

  private Provider<
          Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>>
      mapOfClassOfAndProviderOfFactoryOfProvider;

  private Provider<DispatchingAndroidInjector<Activity>> dispatchingAndroidInjectorProvider;

  private MembersInjector<App> appMembersInjector;

  private Provider<App> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<CommentDao> provideCommentDaoProvider;

  private Provider<LocalCommentRepository> provideLocalCommentRepositoryProvider;

  private Provider<RemoteCommentRepository> provideRemoteCommentRepositoryProvider;

  private DaggerAppComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.commentsActivitySubcomponentBuilderProvider =
        new dagger.internal.Factory<
            BuildersModule_BindCommentsActivity.CommentsActivitySubcomponent.Builder>() {
          @Override
          public BuildersModule_BindCommentsActivity.CommentsActivitySubcomponent.Builder get() {
            return new CommentsActivitySubcomponentBuilder();
          }
        };

    this.bindAndroidInjectorFactoryProvider =
        (Provider) commentsActivitySubcomponentBuilderProvider;

    this.mapOfClassOfAndProviderOfFactoryOfProvider =
        MapProviderFactory
            .<Class<? extends Activity>, AndroidInjector.Factory<? extends Activity>>builder(1)
            .put(CommentsActivity.class, bindAndroidInjectorFactoryProvider)
            .build();

    this.dispatchingAndroidInjectorProvider =
        DispatchingAndroidInjector_Factory.create(mapOfClassOfAndProviderOfFactoryOfProvider);

    this.appMembersInjector = App_MembersInjector.create(dispatchingAndroidInjectorProvider);

    this.applicationProvider = InstanceFactory.create(builder.application);

    this.provideContextProvider =
        AppModule_ProvideContextFactory.create(builder.appModule, applicationProvider);

    this.provideCommentDaoProvider =
        DoubleCheck.provider(
            AppModule_ProvideCommentDaoFactory.create(builder.appModule, provideContextProvider));

    this.provideLocalCommentRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideLocalCommentRepositoryFactory.create(
                builder.appModule, provideCommentDaoProvider));

    this.provideRemoteCommentRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideRemoteCommentRepositoryFactory.create(builder.appModule));
  }

  @Override
  public void inject(App app) {
    appMembersInjector.injectMembers(app);
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private App application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(App.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(App application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class CommentsActivitySubcomponentBuilder
      extends BuildersModule_BindCommentsActivity.CommentsActivitySubcomponent.Builder {
    private CommentsActivityModule commentsActivityModule;

    private CommentsActivity seedInstance;

    @Override
    public BuildersModule_BindCommentsActivity.CommentsActivitySubcomponent build() {
      if (commentsActivityModule == null) {
        this.commentsActivityModule = new CommentsActivityModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(CommentsActivity.class.getCanonicalName() + " must be set");
      }
      return new CommentsActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(CommentsActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class CommentsActivitySubcomponentImpl
      implements BuildersModule_BindCommentsActivity.CommentsActivitySubcomponent {
    private Provider<GetCommentsUseCase> provideGetCommentsUseCaseProvider;

    private Provider<SyncCommentUseCase> provideSyncCommentUseCaseProvider;

    private Provider<AddCommentUseCase> provideAddCommentUseCaseProvider;

    private Provider<CommentsViewModelFactory> provideCommentsViewModelFactoryProvider;

    private Provider<UpdateCommentUseCase> provideUpdateCommentUseCaseProvider;

    private Provider<DeleteCommentUseCase> provideDeleteCommentUseCaseProvider;

    private Provider<SyncCommentLifecycleObserver> provideSyncCommentLifecycleObserverProvider;

    private MembersInjector<CommentsActivity> commentsActivityMembersInjector;

    private CommentsActivitySubcomponentImpl(CommentsActivitySubcomponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CommentsActivitySubcomponentBuilder builder) {

      this.provideGetCommentsUseCaseProvider =
          CommentsActivityModule_ProvideGetCommentsUseCaseFactory.create(
              builder.commentsActivityModule,
              DaggerAppComponent.this.provideLocalCommentRepositoryProvider);

      this.provideSyncCommentUseCaseProvider =
          CommentsActivityModule_ProvideSyncCommentUseCaseFactory.create(
              builder.commentsActivityModule,
              DaggerAppComponent.this.provideRemoteCommentRepositoryProvider);

      this.provideAddCommentUseCaseProvider =
          CommentsActivityModule_ProvideAddCommentUseCaseFactory.create(
              builder.commentsActivityModule,
              DaggerAppComponent.this.provideLocalCommentRepositoryProvider,
              provideSyncCommentUseCaseProvider);

      this.provideCommentsViewModelFactoryProvider =
          CommentsActivityModule_ProvideCommentsViewModelFactoryFactory.create(
              builder.commentsActivityModule,
              provideGetCommentsUseCaseProvider,
              provideAddCommentUseCaseProvider);

      this.provideUpdateCommentUseCaseProvider =
          CommentsActivityModule_ProvideUpdateCommentUseCaseFactory.create(
              builder.commentsActivityModule,
              DaggerAppComponent.this.provideLocalCommentRepositoryProvider);

      this.provideDeleteCommentUseCaseProvider =
          CommentsActivityModule_ProvideDeleteCommentUseCaseFactory.create(
              builder.commentsActivityModule,
              DaggerAppComponent.this.provideLocalCommentRepositoryProvider);

      this.provideSyncCommentLifecycleObserverProvider =
          CommentsActivityModule_ProvideSyncCommentLifecycleObserverFactory.create(
              builder.commentsActivityModule,
              provideUpdateCommentUseCaseProvider,
              provideDeleteCommentUseCaseProvider);

      this.commentsActivityMembersInjector =
          CommentsActivity_MembersInjector.create(
              provideCommentsViewModelFactoryProvider, provideSyncCommentLifecycleObserverProvider);
    }

    @Override
    public void inject(CommentsActivity arg0) {
      commentsActivityMembersInjector.injectMembers(arg0);
    }
  }
}
