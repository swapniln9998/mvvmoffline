// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.swapnil.mvvm_offline.di;

import com.swapnil.mvvm_offline.data.CommentDao;
import com.swapnil.mvvm_offline.domain.LocalCommentRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideLocalCommentRepositoryFactory
    implements Factory<LocalCommentRepository> {
  private final AppModule module;

  private final Provider<CommentDao> commentDaoProvider;

  public AppModule_ProvideLocalCommentRepositoryFactory(
      AppModule module, Provider<CommentDao> commentDaoProvider) {
    assert module != null;
    this.module = module;
    assert commentDaoProvider != null;
    this.commentDaoProvider = commentDaoProvider;
  }

  @Override
  public LocalCommentRepository get() {
    return Preconditions.checkNotNull(
        module.provideLocalCommentRepository(commentDaoProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<LocalCommentRepository> create(
      AppModule module, Provider<CommentDao> commentDaoProvider) {
    return new AppModule_ProvideLocalCommentRepositoryFactory(module, commentDaoProvider);
  }

  /** Proxies {@link AppModule#provideLocalCommentRepository(CommentDao)}. */
  public static LocalCommentRepository proxyProvideLocalCommentRepository(
      AppModule instance, CommentDao commentDao) {
    return instance.provideLocalCommentRepository(commentDao);
  }
}
