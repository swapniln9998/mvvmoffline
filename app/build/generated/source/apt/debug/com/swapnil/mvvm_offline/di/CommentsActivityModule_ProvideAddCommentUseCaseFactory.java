// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.swapnil.mvvm_offline.di;

import com.swapnil.mvvm_offline.domain.AddCommentUseCase;
import com.swapnil.mvvm_offline.domain.LocalCommentRepository;
import com.swapnil.mvvm_offline.domain.SyncCommentUseCase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class CommentsActivityModule_ProvideAddCommentUseCaseFactory
    implements Factory<AddCommentUseCase> {
  private final CommentsActivityModule module;

  private final Provider<LocalCommentRepository> localCommentRepositoryProvider;

  private final Provider<SyncCommentUseCase> syncCommentUseCaseProvider;

  public CommentsActivityModule_ProvideAddCommentUseCaseFactory(
      CommentsActivityModule module,
      Provider<LocalCommentRepository> localCommentRepositoryProvider,
      Provider<SyncCommentUseCase> syncCommentUseCaseProvider) {
    assert module != null;
    this.module = module;
    assert localCommentRepositoryProvider != null;
    this.localCommentRepositoryProvider = localCommentRepositoryProvider;
    assert syncCommentUseCaseProvider != null;
    this.syncCommentUseCaseProvider = syncCommentUseCaseProvider;
  }

  @Override
  public AddCommentUseCase get() {
    return Preconditions.checkNotNull(
        module.provideAddCommentUseCase(
            localCommentRepositoryProvider.get(), syncCommentUseCaseProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<AddCommentUseCase> create(
      CommentsActivityModule module,
      Provider<LocalCommentRepository> localCommentRepositoryProvider,
      Provider<SyncCommentUseCase> syncCommentUseCaseProvider) {
    return new CommentsActivityModule_ProvideAddCommentUseCaseFactory(
        module, localCommentRepositoryProvider, syncCommentUseCaseProvider);
  }

  /**
   * Proxies {@link CommentsActivityModule#provideAddCommentUseCase(LocalCommentRepository,
   * SyncCommentUseCase)}.
   */
  public static AddCommentUseCase proxyProvideAddCommentUseCase(
      CommentsActivityModule instance,
      LocalCommentRepository localCommentRepository,
      SyncCommentUseCase syncCommentUseCase) {
    return instance.provideAddCommentUseCase(localCommentRepository, syncCommentUseCase);
  }
}
