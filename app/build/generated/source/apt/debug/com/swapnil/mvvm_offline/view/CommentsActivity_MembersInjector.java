// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.swapnil.mvvm_offline.view;

import com.swapnil.mvvm_offline.domain.services.SyncCommentLifecycleObserver;
import com.swapnil.mvvm_offline.presentation.CommentsViewModelFactory;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class CommentsActivity_MembersInjector implements MembersInjector<CommentsActivity> {
  private final Provider<CommentsViewModelFactory> viewModelFactoryProvider;

  private final Provider<SyncCommentLifecycleObserver> syncCommentLifecycleObserverProvider;

  public CommentsActivity_MembersInjector(
      Provider<CommentsViewModelFactory> viewModelFactoryProvider,
      Provider<SyncCommentLifecycleObserver> syncCommentLifecycleObserverProvider) {
    assert viewModelFactoryProvider != null;
    this.viewModelFactoryProvider = viewModelFactoryProvider;
    assert syncCommentLifecycleObserverProvider != null;
    this.syncCommentLifecycleObserverProvider = syncCommentLifecycleObserverProvider;
  }

  public static MembersInjector<CommentsActivity> create(
      Provider<CommentsViewModelFactory> viewModelFactoryProvider,
      Provider<SyncCommentLifecycleObserver> syncCommentLifecycleObserverProvider) {
    return new CommentsActivity_MembersInjector(
        viewModelFactoryProvider, syncCommentLifecycleObserverProvider);
  }

  @Override
  public void injectMembers(CommentsActivity instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.viewModelFactory = viewModelFactoryProvider.get();
    instance.syncCommentLifecycleObserver = syncCommentLifecycleObserverProvider.get();
  }

  public static void injectViewModelFactory(
      CommentsActivity instance, Provider<CommentsViewModelFactory> viewModelFactoryProvider) {
    instance.viewModelFactory = viewModelFactoryProvider.get();
  }

  public static void injectSyncCommentLifecycleObserver(
      CommentsActivity instance,
      Provider<SyncCommentLifecycleObserver> syncCommentLifecycleObserverProvider) {
    instance.syncCommentLifecycleObserver = syncCommentLifecycleObserverProvider.get();
  }
}
