// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.swapnil.mvvm_offline.di;

import com.swapnil.mvvm_offline.domain.GetCommentsUseCase;
import com.swapnil.mvvm_offline.domain.LocalCommentRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class CommentsActivityModule_ProvideGetCommentsUseCaseFactory
    implements Factory<GetCommentsUseCase> {
  private final CommentsActivityModule module;

  private final Provider<LocalCommentRepository> localCommentRepositoryProvider;

  public CommentsActivityModule_ProvideGetCommentsUseCaseFactory(
      CommentsActivityModule module,
      Provider<LocalCommentRepository> localCommentRepositoryProvider) {
    assert module != null;
    this.module = module;
    assert localCommentRepositoryProvider != null;
    this.localCommentRepositoryProvider = localCommentRepositoryProvider;
  }

  @Override
  public GetCommentsUseCase get() {
    return Preconditions.checkNotNull(
        module.provideGetCommentsUseCase(localCommentRepositoryProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<GetCommentsUseCase> create(
      CommentsActivityModule module,
      Provider<LocalCommentRepository> localCommentRepositoryProvider) {
    return new CommentsActivityModule_ProvideGetCommentsUseCaseFactory(
        module, localCommentRepositoryProvider);
  }

  /** Proxies {@link CommentsActivityModule#provideGetCommentsUseCase(LocalCommentRepository)}. */
  public static GetCommentsUseCase proxyProvideGetCommentsUseCase(
      CommentsActivityModule instance, LocalCommentRepository localCommentRepository) {
    return instance.provideGetCommentsUseCase(localCommentRepository);
  }
}
